import { EventHandler, EventHandlerEvent, EventHandlerFunction } from './events'

export interface TaskLifeCycleEventHandler extends EventHandler {
  state: TaskExecutionState
  attempt?: number
  progressPercent?: number
  startedAt?: number
  createdAt?: number
  completedAt?: number
  failedAt?: number
  errorMessage?: string
  errorStack?: string
}

export type TaskLifeCycleEventHandlerFunction = EventHandlerFunction<TaskLifeCycleEventHandler>

export declare interface Task {
  every(expression: string, payload?: any): Task
  cron(expression: string, payload?: any): Task
  run(after?: string | any, payload?: any): Promise<TaskRunResult>

  // lifecycle events
  on(
    name: TaskLifeCycleEvent | TaskLifeCycleEventString,
    handler: TaskLifeCycleEventHandlerFunction
  ): void | Promise<void>
}
export declare interface TaskOptions {
  timeout?: number
  attempts?: number
}
export declare interface TaskEvent<T> extends EventHandlerEvent<T> {}
export declare interface TaskContext {
  setTimeout(ms: number): void
  progress(message: string, percent: number): void
}
export declare interface TaskRunResult {
  id: string
}
export declare interface TaskHandler<BodyType = any> {
  (event: TaskEvent<BodyType>, context: TaskContext): Promise<any>
}

export enum TaskState {
  Cancelled = 'cancelled',
  Created = 'created',
  Scheduled = 'scheduled',
  Submitted = 'submitted',
  Started = 'started',
  Completed = 'completed',
  Failed = 'failed'
}

export enum TaskLifeCycleEvent {
  Started = 'started',
  Completed = 'completed',
  Failed = 'failed',
  Progress = 'progress',
  Cancelled = 'cancelled'
}

export type TaskLifeCycleEventString = 'started' | 'completed' | 'failed' | 'progress' | 'cancelled'

export declare type TaskExecutionState = TaskLifeCycle

export declare interface TaskExecutionStatus {
  id: string
  name: string
  state: TaskExecutionState
  body?: string

  createdAt: number
  scheduledAt?: number
  submittedAt?: number
  startedAt?: number
  failedAt?: number
  completedAt?: number
  progressedAt?: number

  result?: string
  errorMessage?: string
  errorStack?: string
  progressMessage?: string
  progressPercent?: number
}

export declare type TaskFactoryFunction = {
  <BodyType = any>(name: string, handler: TaskHandler<BodyType>): Task
  <BodyType = any>(name: string, config: TaskOptions, handler: TaskHandler<BodyType>): Task
  status: (executionId: string) => Promise<TaskExecutionStatus | undefined>
}

declare const task: TaskFactoryFunction

export { task }
export default task
