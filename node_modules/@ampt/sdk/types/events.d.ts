import { HandlerContext } from './core'

export declare type EventHandler = {
  id: string
  name: string
  timeout: Number
}

export declare type PublishResult = {
  id: string
  time: number
  delay: number
}

export interface EventHandlerEvent<BodyType = any> {
  target: string
  id: string
  name: string
  body: BodyType
  time: number
  delay: number
  attempt?: number
}

type StringNumberDate = string | number | Date

export interface Handler {
  name: string
  callbacks: Array<Function>
  timeout: Number
  push(handler: Function): void
  setTimeout(ms: Number): void
  invoke(event: any, context: any): Promise<any[]>
}

export interface EventConfig {
  timeout?: number
}

export interface EventHandlerFunction<T = any> {
  (event: EventHandlerEvent<T>, context: HandlerContext): void
}

export declare interface Events {
  on<T = any>(name: string, handler: EventHandlerFunction<T>): Handler | null
  on<T = any>(name: string, config: { timeout: number }, handler: EventHandlerFunction<T>): Handler | null
  publish(name, event: any): Promise<PublishResult>
  publish(name, { after: StringNumberDate }, event: any): Promise<PublishResult>
  getHandlers(): { [id: string]: Function }
  getConfig(): { events: EventHandler[]; errors: any[] }
}

export declare function parseEventSpecifier(
  _specifier: string | string[],
  validEventNames: string[]
): Iterable<Specifier>

declare const events: Events
export default events
