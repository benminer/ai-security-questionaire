import { Readable } from 'stream'

export interface FrameworkApplication {
  callback: Function
  handle: Function
  router: {
    route: Function
  }
  _core: {
    _dispatch: Function
  }
}

export interface HttpContext {
  remoteAddress: string
}

export declare type Application = Function | Partial<FrameworkApplication>
export declare type HandlerFunction =
  | ((request: Request, context: HttpContext) => undefined | PromiseLike<Response>)
  | any

declare interface NodeHTTP extends Omit<HTTP, 'node' | 'on' | 'useNodeHandler'> {
  readStaticFile(path: string): Promise<Readable | undefined>
}

export declare interface HTTP {
  node: NodeHTTP
  setTimeout(timeout: number): void
  use(prefixOrHandler: string | HandlerFunction, hander?: HandlerFunction): void
  useNodeHandler(prefixOrHandler: string | HandlerFunction, handler?: HandlerFunction): void
  on(event: string | number, handler: Function | string)
  static(root: string, options?: any): void
  readStaticFile(path: string): Promise<ReadableStream | undefined>
}

declare const http: HTTP
export default http
