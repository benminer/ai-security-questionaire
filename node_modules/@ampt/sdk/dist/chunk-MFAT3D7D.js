import { createRequire as topLevelCreateRequire } from 'module'
const require = topLevelCreateRequire(import.meta.url || __dirname)
import {
  __commonJS,
  __toESM
} from "./chunk-HWSCZVIB.js";

// ../../node_modules/ramda/src/internal/_isPlaceholder.js
var require_isPlaceholder = __commonJS({
  "../../node_modules/ramda/src/internal/_isPlaceholder.js"(exports, module) {
    "use strict";
    function _isPlaceholder(a) {
      return a != null && typeof a === "object" && a["@@functional/placeholder"] === true;
    }
    module.exports = _isPlaceholder;
  }
});

// ../../node_modules/ramda/src/internal/_curry1.js
var require_curry1 = __commonJS({
  "../../node_modules/ramda/src/internal/_curry1.js"(exports, module) {
    "use strict";
    var _isPlaceholder = require_isPlaceholder();
    function _curry1(fn) {
      return function f1(a) {
        if (arguments.length === 0 || _isPlaceholder(a)) {
          return f1;
        } else {
          return fn.apply(this, arguments);
        }
      };
    }
    module.exports = _curry1;
  }
});

// ../../node_modules/ramda/src/internal/_curry2.js
var require_curry2 = __commonJS({
  "../../node_modules/ramda/src/internal/_curry2.js"(exports, module) {
    "use strict";
    var _curry1 = require_curry1();
    var _isPlaceholder = require_isPlaceholder();
    function _curry2(fn) {
      return function f2(a, b) {
        switch (arguments.length) {
          case 0:
            return f2;
          case 1:
            return _isPlaceholder(a) ? f2 : _curry1(function(_b) {
              return fn(a, _b);
            });
          default:
            return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function(_a) {
              return fn(_a, b);
            }) : _isPlaceholder(b) ? _curry1(function(_b) {
              return fn(a, _b);
            }) : fn(a, b);
        }
      };
    }
    module.exports = _curry2;
  }
});

// ../../node_modules/ramda/src/omit.js
var require_omit = __commonJS({
  "../../node_modules/ramda/src/omit.js"(exports, module) {
    "use strict";
    var _curry2 = require_curry2();
    var omit2 = /* @__PURE__ */ _curry2(function omit3(names, obj) {
      var result = {};
      var index = {};
      var idx = 0;
      var len = names.length;
      while (idx < len) {
        index[names[idx]] = 1;
        idx += 1;
      }
      for (var prop in obj) {
        if (!index.hasOwnProperty(prop)) {
          result[prop] = obj[prop];
        }
      }
      return result;
    });
    module.exports = omit2;
  }
});

// ../../lib/ampt-utilities/src/params.ts
var import_omit = __toESM(require_omit(), 1);
var disallowedKeys = ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"];
function parseParams() {
  try {
    return JSON.parse(process.env.PARAMS || "{}");
  } catch (err) {
    return {};
  }
}
function parseParamGroups() {
  try {
    const parsed = JSON.parse(process.env.PARAM_GROUPS || "{}");
    if (parsed.envExports?.length) {
      setExports(parsed.params, parsed.envExports);
    }
    return parsed.params || {};
  } catch (err) {
    return {};
  }
}
function setExports(groups = {}, envExports = []) {
  for (const envExport of envExports) {
    const [exportKey, exportPath] = envExport;
    const [paramGroup, paramName] = exportPath.split(".");
    const value = groups?.[paramGroup]?.[paramName];
    if (value && !disallowedKeys.includes(exportKey)) {
      if (process.env[exportKey]) {
        console.warn(`Warning: Existing export exists for ${exportKey}. Overwriting.`);
      }
      process.env[exportKey] = value;
    }
  }
}
function filterDisallowedExportParams(params) {
  return (0, import_omit.default)(disallowedKeys, params);
}

// ../../lib/ampt-utilities/src/index.ts
function tryParseJson(str) {
  try {
    return JSON.parse(str);
  } catch (err) {
    return;
  }
}

export {
  parseParams,
  parseParamGroups,
  setExports,
  filterDisallowedExportParams,
  tryParseJson
};
